module Dbml2Mmd
  class Converter
    attr_reader :last_output
    
    def initialize(options = {})
      @options = options
      @theme = options[:theme] || 'default'
      @last_output = nil
    end
  
    def convert(dbml_content)
      # Parse DBML content
      dbml = Dbml2Mmd::Parser.parse(dbml_content)
      tables = dbml[:tables] || []
      refs = dbml[:refs] || []
      
      # Filter tables if specified
      if (table_list = @options[:only_tables])
        table_names = table_list.split(',').map(&:strip)
        tables = tables.select { |table| table_names.include?(table[:name]) }
        # Only keep references between included tables
        refs = refs.select do |ref| 
          table_names.include?(ref[:from][:table]) && table_names.include?(ref[:to][:table])
        end
      end
  
      # Generate Mermaid ERD
      mermaid = ["erDiagram"]
      
      # Add tables and their fields
      tables.each do |table|
        table_fields = table[:fields].map do |field|
          field_type = field[:type].to_s.gsub(/\s+/, "")
          
          # Check for primary key and foreign key attributes
          is_pk = field[:attributes]&.include?('primary key')
          is_fk = refs.any? { |ref| ref[:from][:table] == table[:name] && ref[:from][:field] == field[:name] }
          
          field_annotation = []
          field_annotation << "PK" if is_pk
          field_annotation << "FK" if is_fk
          
          annotation_str = field_annotation.empty? ? "" : " #{field_annotation.join(',')}"
          
          # Format the field with proper spacing
          "    #{field[:name]} #{field_type}#{annotation_str}"
        end
        
        mermaid << "  #{table[:name]} {"
        mermaid.concat(table_fields)
        mermaid << "  }"
      end
      
      # Add relationships with proper labels
      refs.each do |ref|
        from_table = ref[:from][:table]
        to_table = ref[:to][:table]
        relationship_type = get_relationship_type(ref[:type])
        
        # Create a descriptive label
        label_text = "#{ref[:from][:field]} -> #{ref[:to][:field]}"
        label = ref[:name] ? "\"#{ref[:name]}: #{label_text}\"" : "\"#{label_text}\""
        
        mermaid << "  #{from_table} #{relationship_type} #{to_table} : #{label}"
      end
      
      # Add a header comment with generation info and theme
      theme_config = get_theme_config(@theme)
      header = [
        "%%{init: #{theme_config}}%%",
        "% Generated by dbml2mmd on #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}",
        "% https://mermaid.js.org/syntax/entityRelationshipDiagram.html"
      ]
      
      # Save and return the full diagram
      @last_output = (header + [mermaid.join("\n")]).join("\n")
    end
    
    def output_html
      return nil unless @options[:html_output]
      return nil unless @last_output
      
      <<~HTML
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>Database Diagram</title>
          <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
          <style>
            body { font-family: sans-serif; margin: 20px; }
            .mermaid { margin: 20px auto; }
          </style>
        </head>
        <body>
          <h1>Database Diagram</h1>
          <p>Generated on #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}</p>
          <div class="mermaid">
        #{@last_output}
          </div>
          <script>
            mermaid.initialize({ startOnLoad: true });
          </script>
        </body>
        </html>
      HTML
    end
    
    private
    
    def get_relationship_type(type)
      case type
      when 'one_to_one' then "||--||"
      when 'one_to_many' then "||--o{"
      when 'many_to_one' then "}o--||"
      when 'many_to_many' then "}o--o{"
      else "--"
      end
    end
    
    def get_theme_config(theme)
      case theme
      when 'dark'
        "{'theme': 'dark', 'themeVariables': { 'primaryColor': '#2A2A2A', 'primaryBorderColor': '#777', 'primaryTextColor': '#DDD' }}"
      when 'neutral'
        "{'theme': 'neutral', 'themeVariables': { 'primaryColor': '#f4f4f4', 'primaryBorderColor': '#888', 'primaryTextColor': '#333' }}"
      when 'forest'
        "{'theme': 'forest', 'themeVariables': { 'primaryColor': '#e6f5e6', 'primaryBorderColor': '#4d994d', 'primaryTextColor': '#1a331a' }}"
      else # default theme
        "{'theme': 'default', 'themeVariables': { 'primaryColor': '#f4f4f4', 'primaryBorderColor': '#aaa', 'primaryTextColor': '#333' }}"
      end
    end
  end
end
